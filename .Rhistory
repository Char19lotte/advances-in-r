}
f(x) * 2
}
f(10)
agrep("Donald Trump", "Barack Obama", max.distance = list(all = 3))
agrep("Donald Trump", "Donald Drumpf", max.distance = list(all = 3))
?do
dat <- flights %>% as.data.frame
head(dat)
do(dat, is.numeric)
do(dat, mean)
do(dat, head)
do(dat, head(., 2))
foo_df <- as.data.frame(matrix(ncol = 6))
names(foo_df) <- c("hIgHlo", "REPEAT VALUE", "REPEAT VALUE", "% successful (2009)",  "abc@!*", "")
foo_df
janitor::clean_names(foo_df)
make.names(names(foo_df)) # base R solution - not very convincing
convert_to_NA(letters[1:5], c("b", "d"))
convert_to_NA(sample(c(1:5, 98, 99), 20, replace = TRUE), c(98,99))
source("00-course-setup.r")
wd <- getwd()
system.time(ddply(baseball, "id", summarize, length(year)))
system.time(ddply(baseball, "id", summarize, length(year)))
system.time(tapply(baseball$year, baseball$id,
function(x) length(x)))
system.time(tapply(baseball$year, baseball$id,
function(x) length(x)))
system.time(tapply(baseball$year, baseball$id,
function(x) length(x)))
system.time(ddply(baseball, "id", summarize, length(year)))
wt_mean <- function(x, w) {
stopifnot(length(x) == length(w))
x <- x[!miss]
w <- w[!miss]
sum(w * x) / sum(x)
}
wt_mean(1:6, 5:1)
wt_mean(1:6, 6:1)
# make your function global
wt_mean <- function(x, w) {
stopifnot(length(x) == length(w))
miss <- is.na(x) | is.na(w)
x <- x[!miss]
w <- w[!miss]
sum(w * x) / sum(x)
}
wt_mean(1:6, 6:1)
wt_mean(x = c(1, 2, 3, NA, 5), w = rep(1, 5))
# make your function global
wt_mean <- function(x, w) {
stopifnot(length(x) == length(w))
sum(w * x) / sum(x)
}
wt_mean(x = c(1, 2, 3, NA, 5), w = rep(1, 5))
# make your function global
wt_mean <- function(x, w) {
sum(w * x) / sum(x)
}
wt_mean(x = c(1, 2, 3, NA, 5), w = rep(1, 4))
# Calculates the geodesic distance between two points specified by radian latitude/longitude using the Haversine formula (hf); taken from http://www.r-bloggers.com/great-circle-distance-calculations-in-r/
geod_dist <- function(lon1, lat1, lon2, lat2, earth.radius = 6371) {
R <- earth.radius
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = R * c
return(d) # Distance in km
}
geod_dist(49.49, 8.47, 52.51, 13.38)
geod_dist(8.47, 49.49, 13.38, 52.51)
gDistance
# Calculates the geodesic distance between two points specified by radian latitude/longitude using the Haversine formula (hf); taken from http://www.r-bloggers.com/great-circle-distance-calculations-in-r/
geod_dist <- function(lon1, lat1, lon2, lat2, earth.radius = 6371) {
# from degrees to radians
lon1 <- function(lon1) return(lon1*pi/180)
lat1 <- function(lat1) return(lat1*pi/180)
lon2 <- function(lon2) return(lon2*pi/180)
lat2 <- function(lat2) return(lat2*pi/180)
# calculation
R <- earth.radius
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = R * c
return(d) # Distance in km
}
geod_dist(8.47, 49.49, 13.38, 52.51)
# Calculates the geodesic distance between two points specified by radian latitude/longitude using the Haversine formula (hf); taken from http://www.r-bloggers.com/great-circle-distance-calculations-in-r/
geod_dist <- function(lon1, lat1, lon2, lat2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
R <- earth.radius
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = R * c
return(d) # Distance in km
}
geod_dist(8.47, 49.49, 13.38, 52.51)
geod_dist(49.49, 8.47, 52.51, 13.38)
geod_dist(49.5, 8.4, 52.5, 13.4)
geod_dist(49.5, 8.4, 52.5, 13.4)
geod_dist(8.4, 49.5, 13.4, 52.5)
geod_dist(8.4, 49.5, 13.4, 52.5)
geod_dist(8.4, 49.5, 13.4, 52.5)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth.radius * c
return(d) # Distance in km
}
geod_dist(lat1 = 8.4, lon1 = 49.5, lat2 = 13.4, lon2 = 52.5)
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sin(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth.radius * c
return(d) # Distance in km
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth.radius * c
return(d) # Distance in km
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d) # Distance in km
}
lat1 = 49.5; lon1 = 8.4; lat2 = 52.5; lon2 = 13.4
lat1 = 49.5; lon1 = 8.4; lat2 = 52.5; lon2 = 13.4
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
print(lon2 <- deg2rad(long2))
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
print(lat1 <- deg2rad(lat1))
print(lon2 <- deg2rad(long2))
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
traceback()
# Calculates the geodesic distance between two points specified by radian latitude/longitude using the Haversine formula (hf); taken from [https://goo.gl/GezNGB]
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
traceback()
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
browser()
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
lon1
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
lon1 <- 1234
# Calculates the geodesic distance between two points specified by radian latitude/longitude using the Haversine formula (hf); taken from [https://goo.gl/GezNGB]
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
options(error = recover)
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
deg2rad(lon2)
lon2 <- deg2rad(lon2)
lon2 <- deg2rad(lon2)
## solution 3: use browser()
geod_dist <- function(lat1, lon1, lat2, lon2, earth.radius = 6371) {
# from degrees to radians
browser()
deg2rad <- function(deg) return(deg*pi/180)
lon1 <- deg2rad(lon1)
lat1 <- deg2rad(lat1)
lon2 <- deg2rad(lon2)
lat2 <- deg2rad(lat2)
# calculation
delta.long <- (lon2 - lon1)
delta.lat <- (lat2 - lat1)
a <- sin(delta.lat/2)^2 + cos(lat1) * cos(lat2) * sing(delta.long/2)^2
c <- 2 * asin(min(1,sqrt(a)))
d = earth_radius * c
return(d)
}
geod_dist(lat1 = 49.5, lon1 = 8.4, lat2 = 52.5, lon2 = 13.4)
?rowwise
?mdply
mdply(data.frame(mean = 1:5, sd = 1:5), rnorm, n = 2)
mdply(data.frame(mean = 1:5, sd = 1:5), rnorm, n = 3)
mlply(data.frame(mean = 1:5, sd = 1:5), rnorm, n = 3)
lapply(mtcars, is.numeric)
sapply(mtcars, is.numeric)
vapply(mtcars, is.numeric, logical(1))
vapply(mtcars, is.numeric, character(1))
options(error = recover)
?options
options(error = stop)
vapply(mtcars, is.numeric, character(1))
vapply(mtcars, is.numeric, logical(1))
sapply(list(), is.numeric)
vapply(list(), is.numeric, logical(1))
df <- data.frame(x = 1:10, y = letters[1:10])
sapply(df, class)
vapply(df, class, character(1))
df
sapply(df, class)
vapply(df, class, character(1))
df2 <- data.frame(x = 1:10, y = Sys.time() + 1:10)
df2
sapply(df2, class)
vapply(df2, class, character(1))
vapply(df2, class, character(2))
vapply(df2, class, character(1))
a <- matrix(1:20, nrow = 5)
apply(a, 1, mean)
apply(a, 2, mean)
x <- matrix(rnorm(20, 0, 10), nrow = 4)
x1 <- sweep(x, 1, apply(x, 1, min), `-`)
x2 <- sweep(x1, 1, apply(x1, 1, max), `/`)
x1
x
x <- matrix(rnorm(20, 0, 10), nrow = 4)
x
apply(x, 1, min)
x1 <- sweep(x, 1, apply(x, 1, min), `-`)
x1
?sweep
x2 <- sweep(x1, 1, apply(x1, 1, max), `/`)
x2
sweep(x, 1, mean)
sweep(x, 1, c(1, 2, 3, 4))
sweep(x, 1, c(1, 2, 3, 4), "*")
?mapply
?Map
xs <- replicate(5, runif(10), simplify = FALSE)
replicate(5, runif(10), simplify = FALSE)
replicate(5, runif(10), simplify = TRUE)
xs <- replicate(5, runif(10), simplify = FALSE)
ws <- replicate(5, rpois(10, 5) + 1, simplify = FALSE)
ws
vapply(xs, mean, numeric(1))
Map(weighted.mean, xs, ws) %>% unlist
Map(function(x, w) weighted.mean(x, w, na.rm = TRUE), xs, ws)
mapply(function(x, w) weighted.mean(x, w, na.rm = TRUE), xs, ws)
mapply(weighted.mean, xs, ws)
?mapply
mapply(function(x, w) weighted.mean(x, w, na.rm = TRUE), xs, ws)
mapply(function(x, w) weighted.mean(x, w, na.rm = TRUE), xs, ws)
?ddply
head(babynames)
ddply(babynames, year, summarise)
ddply(babynames, "year", summarise)
ddply(babynames, "year", mean)
ddply(babynames, "year", mean(year))
ddply(babynames, "year", function(x) {which(x$name, max(prop))}
)
ddply(babynames, "year", function(x) {which(x$name, max(x$prop))}
)
ddply(babynames, "year", function(x) {
max(x$prop)}
)
ddply(babynames, "year", function(x) {
max_prop <- max(x$prop)
most_pop <- which(max_prop)
})
ddply(babynames, "year", function(x) {
max_prop <- max(x$prop)
#most_pop <- which(max_prop)
data.frame(max_prop = max_prop)
})
names(babynames)
# ddply()
ddply(babynames, "year", function(x) {
max_prop <- max(x$prop)
most_pop <- x$name[x$max_prop == max_prop]
data.frame(max_prop = max_prop)
})
# ddply()
ddply(babynames, "year", function(x) {
max_prop <- max(x$prop)
most_pop <- x$name[x$max_prop == max_prop]
data.frame(max_prop = max_prop, most_pop = most_pop)
})
names(babynames)
# ddply()
ddply(babynames, "year", function(x) {
max_prop <- max(x$prop)
max_n <- max(x$n)
data.frame(max_prop = max_prop, max_n = max_n)
})
View(babynames)
ddply(babynames, "year", summarize, max_prop = max(prop))
ddply(babynames, "year", transform, max_prop = max(prop))
bnames <- ddply(babynames, c("sex", "year"), transform, rank = rank(-percent, ties.method = "first"))
bnames <- ddply(babynames, c("sex", "year"), transform, rank = rank(-prop, ties.method = "first"))
head(bnames)
?ldply
?dlply
bnames <- dlply(babynames, "year", summarize, max_prop = max(prop))
bnames
scale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
vec <- runif(10, 0, 10)
scale01(vec)
df <- mtcars
lapply(df, scale01)
df[] <- lapply(df, scale01)
df
foo <- lapply(df, scale01)
df <- mtcars
foo <- lapply(df, scale01)
foo
foo <- sapply(df, scale01)
foo
class(foo)
foo <- lapply(df, scale01)
foo
foo <- lapply(df, scale01) %>% as.data.frame
foo
df <- iris
df_num <- sapply(df, is.numeric)
df_num
head(mtcars)
iris
df[df_num] <- lapply(df[df_num], scale01)
df
?ddply
?ldply
df <- mtcars
ldply(df, "scale01")
ddply(df, "scale01")
llply(df, "scale01")
adply(df, "scale01")
ddply(df, "scale01")
adply(df, , 2"scale01")
adply(df, 2, "scale01")
adply(df, 1, "scale01")
adply(df, 1, "scale01") %>% head
head(mtcars)
adply(df, 2, "scale01") %>% head
ddply(mtcars, colwise(scale01))
colwise(mtcars, scale01)
colwise(scale01)
colwise(scale01)(mtcars)
?colwise
?rowwise
head(babynames)
colwise(babynames, max)
?colwise
colwise(max)(babynames)
colwise([1:10])(babynames)
colwise(`[`)(babynames)
colwise(`[`, 1:10)(babynames)
numcolwise(mean)(babynames)
ddply(babynames, "year", colwise(missing))
ddply(babynames, .(year), colwise(missing))
ddply(babynames, .(year), colwise(nmissing))
ddply(babynames, .(year), colwise(mean))
ddply(babynames, .(year), colwise(max))
x <- 1:20
y <- factor(rep(letters[1:5], each = 4))
x
y
dat <- data.frame(x = 1:20, y = factor(rep(letters[1:5], each = 4)))
dat
tapply(dat$x, dat$y, sum)
?tapply
dat <- data.frame(x = 1:20, y = rep(letters[1:5], each = 4))
tapply(dat$x, dat$y, sum) # data, index, function
?llply
llply(mtcars, scale01)
ldply(mtcars, scale01)
llply(mtcars, scale01)
laply(mtcars, scale01)
llply(mtcars, scale01)
llply(mtcars, scale01) %>% as.data.frame
df[] <- llply(mtcars, scale01)
df
?colwise
colwise(scale01)(df)
df <- iris
colwise(scale01)(df)
numcolwise(scale01)(df)
ddply(df, colwise(scale01))
ddply(df, numcolwise(scale01))
llply(df, numcolwise(scale01))
df <- iris
llply(df, numcolwise(scale01))
df
ddply(df, .(), numcolwise(scale01))
?ddply
ddply(df, ~, numcolwise(scale01))
ddply(df, ., numcolwise(scale01))
ddply(df, .(), numcolwise(scale01))
summarize(df, scale01)
?summarize
dplyr::summarize(df, scale01)
https://www.r-bloggers.com/how-to-reshape-data-in-r-tidyr-vs-reshape2/
# Hadley Wickham's paper on tidy data:
browseURL("https://www.jstatsoft.org/article/view/v059i10")
